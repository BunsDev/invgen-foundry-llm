/* Autogenerated file. Do not edit manually. */

/* tslint:disable */

/* eslint-disable */
import type {
  TestERC20Token,
  TestERC20TokenInterface,
} from "../../../contracts/helpers/TestERC20Token";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import {
  Signer,
  utils,
  Contract,
  ContractFactory,
  BigNumberish,
  Overrides,
} from "ethers";

const _abi = [
  {
    inputs: [
      {
        internalType: "string",
        name: "name",
        type: "string",
      },
      {
        internalType: "string",
        name: "symbol",
        type: "string",
      },
      {
        internalType: "uint256",
        name: "totalSupply",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "InvalidShortString",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "str",
        type: "string",
      },
    ],
    name: "StringTooLong",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "Approval",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [],
    name: "EIP712DomainChanged",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "Transfer",
    type: "event",
  },
  {
    inputs: [],
    name: "DOMAIN_SEPARATOR",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
    ],
    name: "allowance",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "approve",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "balanceOf",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "decimals",
    outputs: [
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "subtractedValue",
        type: "uint256",
      },
    ],
    name: "decreaseAllowance",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "eip712Domain",
    outputs: [
      {
        internalType: "bytes1",
        name: "fields",
        type: "bytes1",
      },
      {
        internalType: "string",
        name: "name",
        type: "string",
      },
      {
        internalType: "string",
        name: "version",
        type: "string",
      },
      {
        internalType: "uint256",
        name: "chainId",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "verifyingContract",
        type: "address",
      },
      {
        internalType: "bytes32",
        name: "salt",
        type: "bytes32",
      },
      {
        internalType: "uint256[]",
        name: "extensions",
        type: "uint256[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "addedValue",
        type: "uint256",
      },
    ],
    name: "increaseAllowance",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "name",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
    ],
    name: "nonces",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "deadline",
        type: "uint256",
      },
      {
        internalType: "uint8",
        name: "v",
        type: "uint8",
      },
      {
        internalType: "bytes32",
        name: "r",
        type: "bytes32",
      },
      {
        internalType: "bytes32",
        name: "s",
        type: "bytes32",
      },
    ],
    name: "permit",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "symbol",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "totalSupply",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "transfer",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "transferFrom",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint8",
        name: "newDecimals",
        type: "uint8",
      },
    ],
    name: "updateDecimals",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x6101606040526009805460ff191660121790553480156200001f57600080fd5b50604051620018c6380380620018c6833981016040819052620000429162000362565b6040805180820190915260018152603160f81b602082015283908190818560036200006e838262000463565b5060046200007d828262000463565b506200008f915083905060056200014d565b61012052620000a08160066200014d565b61014052815160208084019190912060e052815190820120610100524660a0526200012e60e05161010051604080517f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f60208201529081019290925260608201524660808201523060a082015260009060c00160405160208183030381529060405280519060200120905090565b60805250503060c0525062000144338262000186565b505050620005ab565b60006020835110156200016d5762000165836200024d565b905062000180565b816200017a848262000463565b5060ff90505b92915050565b6001600160a01b038216620001e25760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f20616464726573730060448201526064015b60405180910390fd5b8060026000828254620001f691906200052f565b90915550506001600160a01b038216600081815260208181526040808320805486019055518481527fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef910160405180910390a35050565b600080829050601f815111156200027b578260405163305a27a960e01b8152600401620001d9919062000551565b8051620002888262000586565b179392505050565b505050565b634e487b7160e01b600052604160045260246000fd5b60005b83811015620002c8578181015183820152602001620002ae565b50506000910152565b600082601f830112620002e357600080fd5b81516001600160401b038082111562000300576200030062000295565b604051601f8301601f19908116603f011681019082821181831017156200032b576200032b62000295565b816040528381528660208588010111156200034557600080fd5b62000358846020830160208901620002ab565b9695505050505050565b6000806000606084860312156200037857600080fd5b83516001600160401b03808211156200039057600080fd5b6200039e87838801620002d1565b94506020860151915080821115620003b557600080fd5b50620003c486828701620002d1565b925050604084015190509250925092565b600181811c90821680620003ea57607f821691505b6020821081036200040b57634e487b7160e01b600052602260045260246000fd5b50919050565b601f8211156200029057600081815260208120601f850160051c810160208610156200043a5750805b601f850160051c820191505b818110156200045b5782815560010162000446565b505050505050565b81516001600160401b038111156200047f576200047f62000295565b6200049781620004908454620003d5565b8462000411565b602080601f831160018114620004cf5760008415620004b65750858301515b600019600386901b1c1916600185901b1785556200045b565b600085815260208120601f198616915b828110156200050057888601518255948401946001909101908401620004df565b50858210156200051f5787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b808201808211156200018057634e487b7160e01b600052601160045260246000fd5b602081526000825180602084015262000572816040850160208701620002ab565b601f01601f19169190910160400192915050565b805160208083015191908110156200040b5760001960209190910360031b1b16919050565b60805160a05160c05160e0516101005161012051610140516112c0620006066000396000610425015260006103fa01526000610b9001526000610b6801526000610ac301526000610aed01526000610b1701526112c06000f3fe608060405234801561001057600080fd5b50600436106101005760003560e01c806370a0823111610097578063a457c2d711610066578063a457c2d71461023e578063a9059cbb14610251578063d505accf14610264578063dd62ed3e1461027757600080fd5b806370a08231146101df5780637ecebe001461020857806384b0196e1461021b57806395d89b411461023657600080fd5b806323b872dd116100d357806323b872dd1461019c578063313ce567146101af5780633644e515146101c457806339509351146101cc57600080fd5b806306fdde0314610105578063095ea7b3146101235780630ce83a611461014657806318160ddd1461018a575b600080fd5b61010d6102b0565b60405161011a9190611016565b60405180910390f35b61013661013136600461104c565b610342565b604051901515815260200161011a565b610188610154366004611087565b600980547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001660ff92909216919091179055565b005b6002545b60405190815260200161011a565b6101366101aa3660046110a2565b61035c565b60095460405160ff909116815260200161011a565b61018e610380565b6101366101da36600461104c565b61038f565b61018e6101ed3660046110de565b6001600160a01b031660009081526020819052604090205490565b61018e6102163660046110de565b6103ce565b6102236103ec565b60405161011a97969594939291906110f9565b61010d610491565b61013661024c36600461104c565b6104a0565b61013661025f36600461104c565b61054f565b6101886102723660046111ab565b61055d565b61018e610285366004611215565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b6060600380546102bf90611248565b80601f01602080910402602001604051908101604052809291908181526020018280546102eb90611248565b80156103385780601f1061030d57610100808354040283529160200191610338565b820191906000526020600020905b81548152906001019060200180831161031b57829003601f168201915b5050505050905090565b6000336103508185856106c1565b60019150505b92915050565b60003361036a858285610819565b6103758585856108c9565b506001949350505050565b600061038a610ab6565b905090565b3360008181526001602090815260408083206001600160a01b038716845290915281205490919061035090829086906103c990879061127c565b6106c1565b6001600160a01b038116600090815260076020526040812054610356565b6000606080828080836104207f00000000000000000000000000000000000000000000000000000000000000006005610be1565b61044b7f00000000000000000000000000000000000000000000000000000000000000006006610be1565b604080516000808252602082019092527f0f000000000000000000000000000000000000000000000000000000000000009b939a50919850469750309650945092509050565b6060600480546102bf90611248565b3360008181526001602090815260408083206001600160a01b0387168452909152812054909190838110156105425760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f7760448201527f207a65726f00000000000000000000000000000000000000000000000000000060648201526084015b60405180910390fd5b61037582868684036106c1565b6000336103508185856108c9565b834211156105ad5760405162461bcd60e51b815260206004820152601d60248201527f45524332305065726d69743a206578706972656420646561646c696e650000006044820152606401610539565b60007f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c98888886105dc8c610c8c565b6040805160208101969096526001600160a01b0394851690860152929091166060840152608083015260a082015260c0810186905260e001604051602081830303815290604052805190602001209050600061063782610cb4565b9050600061064782878787610cfc565b9050896001600160a01b0316816001600160a01b0316146106aa5760405162461bcd60e51b815260206004820152601e60248201527f45524332305065726d69743a20696e76616c6964207369676e617475726500006044820152606401610539565b6106b58a8a8a6106c1565b50505050505050505050565b6001600160a01b03831661073c5760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f2061646460448201527f72657373000000000000000000000000000000000000000000000000000000006064820152608401610539565b6001600160a01b0382166107b85760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f20616464726560448201527f73730000000000000000000000000000000000000000000000000000000000006064820152608401610539565b6001600160a01b0383811660008181526001602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b6001600160a01b038381166000908152600160209081526040808320938616835292905220547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff81146108c357818110156108b65760405162461bcd60e51b815260206004820152601d60248201527f45524332303a20696e73756666696369656e7420616c6c6f77616e63650000006044820152606401610539565b6108c384848484036106c1565b50505050565b6001600160a01b0383166109455760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f20616460448201527f64726573730000000000000000000000000000000000000000000000000000006064820152608401610539565b6001600160a01b0382166109c15760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201527f65737300000000000000000000000000000000000000000000000000000000006064820152608401610539565b6001600160a01b03831660009081526020819052604090205481811015610a505760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e742065786365656473206260448201527f616c616e636500000000000000000000000000000000000000000000000000006064820152608401610539565b6001600160a01b03848116600081815260208181526040808320878703905593871680835291849020805487019055925185815290927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef910160405180910390a36108c3565b6000306001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016148015610b0f57507f000000000000000000000000000000000000000000000000000000000000000046145b15610b3957507f000000000000000000000000000000000000000000000000000000000000000090565b61038a604080517f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f60208201527f0000000000000000000000000000000000000000000000000000000000000000918101919091527f000000000000000000000000000000000000000000000000000000000000000060608201524660808201523060a082015260009060c00160405160208183030381529060405280519060200120905090565b606060ff8314610bfb57610bf483610d24565b9050610356565b818054610c0790611248565b80601f0160208091040260200160405190810160405280929190818152602001828054610c3390611248565b8015610c805780601f10610c5557610100808354040283529160200191610c80565b820191906000526020600020905b815481529060010190602001808311610c6357829003601f168201915b50505050509050610356565b6001600160a01b03811660009081526007602052604090208054600181018255905b50919050565b6000610356610cc1610ab6565b836040517f19010000000000000000000000000000000000000000000000000000000000008152600281019290925260228201526042902090565b6000806000610d0d87878787610d63565b91509150610d1a81610e27565b5095945050505050565b60606000610d3183610f8f565b604080516020808252818301909252919250600091906020820181803683375050509182525060208101929092525090565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0831115610d9a5750600090506003610e1e565b6040805160008082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa158015610dee573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b038116610e1757600060019250925050610e1e565b9150600090505b94509492505050565b6000816004811115610e3b57610e3b61129d565b03610e435750565b6001816004811115610e5757610e5761129d565b03610ea45760405162461bcd60e51b815260206004820152601860248201527f45434453413a20696e76616c6964207369676e617475726500000000000000006044820152606401610539565b6002816004811115610eb857610eb861129d565b03610f055760405162461bcd60e51b815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e677468006044820152606401610539565b6003816004811115610f1957610f1961129d565b03610f8c5760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c60448201527f75650000000000000000000000000000000000000000000000000000000000006064820152608401610539565b50565b600060ff8216601f811115610356576040517fb3512b0c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000815180845260005b81811015610ff657602081850181015186830182015201610fda565b506000602082860101526020601f19601f83011685010191505092915050565b6020815260006110296020830184610fd0565b9392505050565b80356001600160a01b038116811461104757600080fd5b919050565b6000806040838503121561105f57600080fd5b61106883611030565b946020939093013593505050565b803560ff8116811461104757600080fd5b60006020828403121561109957600080fd5b61102982611076565b6000806000606084860312156110b757600080fd5b6110c084611030565b92506110ce60208501611030565b9150604084013590509250925092565b6000602082840312156110f057600080fd5b61102982611030565b7fff00000000000000000000000000000000000000000000000000000000000000881681526000602060e08184015261113560e084018a610fd0565b8381036040850152611147818a610fd0565b606085018990526001600160a01b038816608086015260a0850187905284810360c0860152855180825283870192509083019060005b818110156111995783518352928401929184019160010161117d565b50909c9b505050505050505050505050565b600080600080600080600060e0888a0312156111c657600080fd5b6111cf88611030565b96506111dd60208901611030565b955060408801359450606088013593506111f960808901611076565b925060a0880135915060c0880135905092959891949750929550565b6000806040838503121561122857600080fd5b61123183611030565b915061123f60208401611030565b90509250929050565b600181811c9082168061125c57607f821691505b602082108103610cae57634e487b7160e01b600052602260045260246000fd5b8082018082111561035657634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052602160045260246000fdfea164736f6c6343000813000a";

type TestERC20TokenConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: TestERC20TokenConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class TestERC20Token__factory extends ContractFactory {
  constructor(...args: TestERC20TokenConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    name: string,
    symbol: string,
    totalSupply: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<TestERC20Token> {
    return super.deploy(
      name,
      symbol,
      totalSupply,
      overrides || {}
    ) as Promise<TestERC20Token>;
  }
  override getDeployTransaction(
    name: string,
    symbol: string,
    totalSupply: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): TransactionRequest {
    return super.getDeployTransaction(
      name,
      symbol,
      totalSupply,
      overrides || {}
    );
  }
  override attach(address: string): TestERC20Token {
    return super.attach(address) as TestERC20Token;
  }
  override connect(signer: Signer): TestERC20Token__factory {
    return super.connect(signer) as TestERC20Token__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): TestERC20TokenInterface {
    return new utils.Interface(_abi) as TestERC20TokenInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): TestERC20Token {
    return new Contract(address, _abi, signerOrProvider) as TestERC20Token;
  }
}
